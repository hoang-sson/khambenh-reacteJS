{"ast":null,"code":"import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\nconst locationHelper = locationHelperBuilder({});\nexport const userIsAuthenticated = connectedRouterRedirect({\n  authenticatedSelector: state => state.user.isLoggedIn,\n  wrapperDisplayName: \"UserIsAuthenticated\",\n  redirectPath: \"/login\"\n});\nexport const userIsNotAuthenticated = connectedRouterRedirect({\n  // Want to redirect the user when they are authenticated\n  authenticatedSelector: state => !state.user.isLoggedIn,\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || \"/\",\n  allowRedirectBack: false\n});","map":{"version":3,"sources":["C:/HK4/DoAn2024/reactjs/src/hoc/authentication.js"],"names":["locationHelperBuilder","connectedRouterRedirect","locationHelper","userIsAuthenticated","authenticatedSelector","state","user","isLoggedIn","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,4CAAlC;AACA,SAASC,uBAAT,QAAwC,sCAAxC;AAEA,MAAMC,cAAc,GAAGF,qBAAqB,CAAC,EAAD,CAA5C;AAEA,OAAO,MAAMG,mBAAmB,GAAGF,uBAAuB,CAAC;AACzDG,EAAAA,qBAAqB,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,UADY;AAEzDC,EAAAA,kBAAkB,EAAE,qBAFqC;AAGzDC,EAAAA,YAAY,EAAE;AAH2C,CAAD,CAAnD;AAMP,OAAO,MAAMC,sBAAsB,GAAGT,uBAAuB,CAAC;AAC5D;AACAG,EAAAA,qBAAqB,EAAGC,KAAD,IAAW,CAACA,KAAK,CAACC,IAAN,CAAWC,UAFc;AAG5DC,EAAAA,kBAAkB,EAAE,wBAHwC;AAI5DC,EAAAA,YAAY,EAAE,CAACJ,KAAD,EAAQM,QAAR,KACZT,cAAc,CAACU,qBAAf,CAAqCD,QAArC,KAAkD,GALQ;AAM5DE,EAAAA,iBAAiB,EAAE;AANyC,CAAD,CAAtD","sourcesContent":["import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n  authenticatedSelector: (state) => state.user.isLoggedIn,\r\n  wrapperDisplayName: \"UserIsAuthenticated\",\r\n  redirectPath: \"/login\",\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n  // Want to redirect the user when they are authenticated\r\n  authenticatedSelector: (state) => !state.user.isLoggedIn,\r\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\r\n  redirectPath: (state, ownProps) =>\r\n    locationHelper.getRedirectQueryParam(ownProps) || \"/\",\r\n  allowRedirectBack: false,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}