{"ast":null,"code":"var _jsxFileName = \"C:\\\\HK4\\\\DoAn2024\\\\reactjs\\\\src\\\\containers\\\\System\\\\ModalEditUser.js\";\nimport React, { Component } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { emitter } from \"../../utils/emitter\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ModalEditUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.props.toggleFromParent();\n    };\n\n    this.handleOnChangeInput = (event, id) => {\n      let copyState = { ...this.state\n      };\n      copyState[id] = event.target.value;\n      this.setState({ ...copyState\n      });\n    };\n\n    this.checkValidateInput = () => {\n      let isValid = true;\n      let arrInput = [\"email\", \"password\", \"firstName\", \"lastName\", \"address\"];\n\n      for (let i = 0; i < arrInput.length; i++) {\n        if (!this.state[arrInput[i]]) {\n          isValid = false;\n          alert(\"Missing parameter \" + arrInput[i]);\n          break;\n        }\n      }\n\n      return isValid;\n    };\n\n    this.handleAddNewUser = () => {\n      let isValid = this.checkValidateInput();\n\n      if (isValid === true) {\n        this.props.createNewUser(this.state);\n      }\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let user = this.props.currentUser;\n\n    if (user && !_.isEmpty(user)) {\n      this.setState({\n        email: user.email,\n        password: \"\",\n        firstName: user.firstName,\n        lastName: user.lastName,\n        address: user.address\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: this.props.isOpen,\n      toggle: () => {\n        this.toggle();\n      },\n      className: \"modal-user-container\",\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: () => {\n          this.toggle();\n        },\n        children: \"Edit user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-user-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  onChange: event => {\n                    this.handleOnChangeInput(event, \"email\");\n                  },\n                  value: this.state.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  onChange: event => {\n                    this.handleOnChangeInput(event, \"password\");\n                  },\n                  value: this.state.password\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n                  children: \"First name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  onChange: event => {\n                    this.handleOnChangeInput(event, \"firstName\");\n                  },\n                  value: this.state.firstName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n                  children: \"Last name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  onChange: event => {\n                    this.handleOnChangeInput(event, \"lastName\");\n                  },\n                  value: this.state.lastName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-container max-width-input\",\n                children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  onChange: event => {\n                    this.handleOnChangeInput(event, \"address\");\n                  },\n                  value: this.state.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          className: \"px-3\",\n          onClick: () => {\n            this.handleAddNewUser();\n          },\n          children: \"Add new\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          className: \"px-3\",\n          onClick: () => {\n            this.toggle();\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);","map":{"version":3,"sources":["C:/HK4/DoAn2024/reactjs/src/containers/System/ModalEditUser.js"],"names":["React","Component","FormattedMessage","connect","Button","Modal","ModalHeader","ModalBody","ModalFooter","emitter","_","ModalEditUser","constructor","props","toggle","toggleFromParent","handleOnChangeInput","event","id","copyState","state","target","value","setState","checkValidateInput","isValid","arrInput","i","length","alert","handleAddNewUser","createNewUser","email","password","firstName","lastName","address","componentDidMount","user","currentUser","isEmpty","render","isOpen","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport _ from \"lodash\";\r\n\r\nclass ModalEditUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      address: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let user = this.props.currentUser;\r\n    if (user && !_.isEmpty(user)) {\r\n      this.setState({\r\n        email: user.email,\r\n        password: \"\",\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        address: user.address,\r\n      });\r\n    }\r\n  }\r\n\r\n  toggle = () => {\r\n    this.props.toggleFromParent();\r\n  };\r\n\r\n  handleOnChangeInput = (event, id) => {\r\n    let copyState = { ...this.state };\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    });\r\n  };\r\n\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrInput = [\"email\", \"password\", \"firstName\", \"lastName\", \"address\"];\r\n    for (let i = 0; i < arrInput.length; i++) {\r\n      if (!this.state[arrInput[i]]) {\r\n        isValid = false;\r\n        alert(\"Missing parameter \" + arrInput[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleAddNewUser = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === true) {\r\n      this.props.createNewUser(this.state);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        isOpen={this.props.isOpen}\r\n        toggle={() => {\r\n          this.toggle();\r\n        }}\r\n        className=\"modal-user-container\"\r\n        size=\"lg\"\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n        >\r\n          Edit user\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"modal-user-body\">\r\n                <div className=\"input-container\">\r\n                  <lable>Email</lable>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(event) => {\r\n                      this.handleOnChangeInput(event, \"email\");\r\n                    }}\r\n                    value={this.state.email}\r\n                  ></input>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <lable>Password</lable>\r\n                  <input\r\n                    type=\"password\"\r\n                    onChange={(event) => {\r\n                      this.handleOnChangeInput(event, \"password\");\r\n                    }}\r\n                    value={this.state.password}\r\n                  ></input>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <lable>First name</lable>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(event) => {\r\n                      this.handleOnChangeInput(event, \"firstName\");\r\n                    }}\r\n                    value={this.state.firstName}\r\n                  ></input>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <lable>Last name</lable>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(event) => {\r\n                      this.handleOnChangeInput(event, \"lastName\");\r\n                    }}\r\n                    value={this.state.lastName}\r\n                  ></input>\r\n                </div>\r\n                <div className=\"input-container max-width-input\">\r\n                  <lable>Address</lable>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(event) => {\r\n                      this.handleOnChangeInput(event, \"address\");\r\n                    }}\r\n                    value={this.state.address}\r\n                  ></input>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.handleAddNewUser();\r\n            }}\r\n          >\r\n            Add new\r\n          </Button>{\" \"}\r\n          <Button\r\n            color=\"secondary\"\r\n            className=\"px-3\"\r\n            onClick={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n"]},"metadata":{},"sourceType":"module"}